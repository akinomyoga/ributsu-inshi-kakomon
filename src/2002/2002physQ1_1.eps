%!
%%Creator: Koichi Murase
%%BoundingBox: 10 10 190 130
/2002physQ1_1.save save def
<< >> begin
%-------------------------------------------------------------------------------
%  ベクトル
%-------------------------------------------------------------------------------
%: <vec> <scal> vmul <vec>
/mwg-v2scal {
  exch aload pop
  %: m x y
  2 index mul
  exch  2 index mul exch
  %: m m*x m*y
  2 array astore
  exch pop
} def

%: <vec> <scal> mwg-v2div <vec>
/mwg-v2div {
  1 exch div mwg-v2scal
} def

/mwg-v2add {
  aload pop
  3 2 roll aload pop
  %: x y x y
  exch 3 1 roll add
  %: x x y+y
  3 1 roll add exch
  %: x+x y+y
  2 array astore
} def

/mwg-v2sub {
  exch aload pop
  3 2 roll aload pop
  %: x y x y
  exch 3 1 roll sub
  %: x x y-y
  3 1 roll sub exch
  %: x-x y-y
  2 array astore
} def

/mwg-v2norm {
  dup mwg-v2abs mwg-v2div
} def

/mwg-v2abs {
  aload pop
  dup mul exch dup mul add sqrt
} def

/mwg-v2arg {
  aload pop exch atan
} def

/mwg-v2rot {
  dup 3 2 roll aload pop 3 1 roll
  %: a y a x
  4 copy
  exch cos mul 3 1 roll exch sin mul sub
  5 1 roll
  exch sin mul 3 1 roll exch cos mul add
  2 array astore
  %: [xc-ys xs+yc]
} def

/mwg-v2iprod {
  aload pop 3 2 roll aload pop
  exch 3 1 roll
  mul 3 1 roll mul add
} def
%-------------------------------------------------------------------------------
%   行列
%-------------------------------------------------------------------------------
%: <mat> mwg-m2det <det>
/mwg-m2det {
  aload pop
  %: [a c] [b d]
  aload pop 3 2 roll aload pop
  %: b d a c
  3 1 roll mul
  %: b c a*d
  3 1 roll mul sub
} def

%: <mat> <scal> mwg-m2smul <mat>
/mwg-m2smul {
  exch aload pop
  %: m [a c] [b d]
  2 index mwg-v2scal
  3 1 roll exch mwg-v2scal
  exch 2 array astore
} def
%: <mat> <scal> mwg-m2sdiv <mat>
/mwg-m2sdiv {
  1 exch div mwg-m2smul
} def

%: <mat> mwg-m2inv <mat>
/mwg-m2inv {
  << >> begin
    %: [[a b] [c d]]
    aload pop
    aload pop /d exch def /c exch def
    aload pop /b exch def /a exch def
    /det a d mul b c mul sub def
    
    d det div
    b neg det div
    2 array astore
    
    c neg det div
    a det div
    2 array astore
    
    2 array astore
  end
} def

%: <mat> <vec> mwg-m2vmul <vec>
/mwg-m2vmul {
  << >> begin
    %: [[a b] [c d]] [x y]
    aload pop /y exch def /x exch def
    aload pop
    aload pop /d exch def /c exch def
    aload pop /b exch def /a exch def
    [
      a x mul c y mul add
      b x mul d y mul add
    ]
  end
} def
%-------------------------------------------------------------------------------
%   交点
%-------------------------------------------------------------------------------
%   <line> : [ [ x y ] [ dx dy] ] ; dx*dx+dy*dy=1
%   <circ> : [ [ x y ] r ]
%-------------------------------------------------------------------------------
%: <pt1> <pt2> mwg-line-create <line>
/mwg-line-create {
  1 index mwg-v2sub mwg-v2norm
  2 array astore
} def

%: <line1> <line2> mwg-line-line-sect <vec>
/mwg-line-line-sect {
  << >> begin
    %: [x dx] [y dy]
    aload pop /dy exch def /y exch def
    aload pop /dx exch def /x exch def
      /t
        [
          dx
          dy -1 mwg-v2scal
        ] mwg-m2inv
        y x mwg-v2sub
      mwg-m2vmul 0 get
    def
    x dx t mwg-v2scal mwg-v2add
  end
} def

/mwg-circ-line-sect {
  << >> begin
    %: [p r] [x dx]
    aload pop /dx exch def /x exch def
    aload pop /r exch def /p exch def
    
    /xp x p mwg-v2sub def
    /t xp dx mwg-v2iprod neg def
    /d dx t mwg-v2scal xp mwg-v2add def
    /s2 r r mul d d mwg-v2iprod sub def
    
    s2 0 gt {
      /s s2 sqrt def
      [
        t s add dx exch mwg-v2scal x mwg-v2add
        t s sub dx exch mwg-v2scal x mwg-v2add
      ]
    } {
      [ ]
    } ifelse
  end
} def

%-------------------------------------------------------------------------------
%   斜線四角形
%-------------------------------------------------------------------------------
%: [ <p1> <p2> <p3> <p4> <theta> <d> ]
/mwg-hatch-quadr {
  << >> begin gsave newpath
    aload pop
    /d exch def /th exch def
    /p4 exch def /p3 exch def
    /p2 exch def /p1 exch def
    
    %-----------------------------------
    % 斜線
    /t [ 1 0 ] th mwg-v2rot def        % 方向
    /n t 90 mwg-v2rot d mwg-v2scal def % 法線
    /p p1 def                          % 起点
    
    %: <pLa1> <pLa2> <pLb1> <pLb2> line-cross
    /line-cross {
      mwg-line-create /Lb exch def
      mwg-line-create /La exch def
      [p t] La mwg-line-line-sect aload pop moveto
      [p t] Lb mwg-line-line-sect aload pop lineto
    } def
    
    %: <pt> line-side <bool>
    /line-side { p mwg-v2sub n mwg-v2iprod 0 lt } def
    
    %-----------------------------------
    % 頂点配列
    /vtc [ [p1 false] [p2 false] [p3 false] [p4 false] ] def
    /P1 {vtc 0 get 0 get} def /S1 {vtc 0 get 1 get} def
    /P2 {vtc 1 get 0 get} def /S2 {vtc 1 get 1 get} def
    /P3 {vtc 2 get 0 get} def /S3 {vtc 2 get 1 get} def
    /P4 {vtc 3 get 0 get} def /S4 {vtc 3 get 1 get} def
    /vtc-update-sgn {
      0 1 3 {
          vtc exch get 1
          1 index 0 get line-side
        put
      } for
    } def
    /vtc-roll {
      vtc aload 5 1 roll 4 1 roll 5 4 roll astore
    } def
    
    %-------------------------------------------------------
    %  斜線端点の計算
    %-------------------------------------------------------
    /draw-hatch-line {
      /flagL true def
      %---------------------------------
      % [ 1 | 2 3 4 ] に分かれている場合
      1 1 4 {
       S1 S2 ne S1 S3 ne S1 S4 ne and and {
          P1 P2 P1 P4 line-cross
          /flagL false def
          exit
        } if
        
        vtc-roll
      } for
      %---------------------------------
      % [ 1 2 | 3 4 ] に分かれている場合
      flagL {
        1 1 2 {
          S1 S2 eq S1 S3 ne S1 S4 ne and and {
            P2 P3 P1 P4 line-cross
            /flagL false def
            exit
          } if
          
          vtc-roll
        } for
      } if
      %---------------------------------
      % [ 1 3 | 2 4 ] に分かれている場合
      flagL {
        % pX = 内側の交点
        /pX P1 P2 mwg-line-create P3 P4 mwg-line-create mwg-line-line-sect def
        pX P1 mwg-v2sub pX P2 mwg-v2sub mwg-v2iprod 0 gt {
          /pX P1 P3 mwg-line-create P2 P4 mwg-line-create mwg-line-line-sect def
        } if
        
        pX line-side S1 eq {
          P1 P2 P2 P3 line-cross
          P1 P4 P4 P3 line-cross
        }{
          P2 P1 P1 P4 line-cross
          P2 P3 P3 P4 line-cross
        } ifelse
      } if
      %---------------------------------
    } def
    %-------------------------------------------------------
    % 斜線の列挙
    %-------------------------------------------------------
    /p p1 def
    vtc-update-sgn
    draw-hatch-line
    
    {
      /p p n mwg-v2add def
      vtc-update-sgn
      S1 S2 eq S2 S3 eq S3 S4 eq and and {exit} if
      draw-hatch-line
    } loop
    
    /p p1 def
    {
      /p p n mwg-v2sub def
      vtc-update-sgn
      S1 S2 eq S2 S3 eq S3 S4 eq and and {exit} if
      draw-hatch-line
    } loop
    %-------------------------------------------------------
    
    stroke
  grestore end
} def
%-------------------------------------------------------------------------------
%   矢印
%-------------------------------------------------------------------------------

/mwg-option-arrow-head-scale 1 def
/mwg-arrow-headA {
  0 0 moveto
  -10 -5 rlineto
  4 5 rlineto
  -4 5 rlineto
  closepath
  fill
} def

%: <x> <y> <dx> <dy> mwg-draw-rarrow
/mwg-draw-rarrow {
  gsave
    4 2 roll translate
    0 0 moveto
    2 copy rlineto
    stroke
    
    2 copy translate
    exch atan rotate
    mwg-option-arrow-head-scale dup scale
    mwg-arrow-headA
  grestore
} def

%: <x> <y> <X> <Y> mwg-draw-arrow
/mwg-draw-arrow {
  2 index sub
  exch 3 index sub exch
  mwg-draw-rarrow
} def
%-------------------------------------------------------------------------------
%   フォント設定
%-------------------------------------------------------------------------------

/mwg-font-gothic {
  /GothicBBB-Medium-EUC-H findfont
  exch scalefont
  setfont
} def

/mwg-font-mincho {
  /Ryumin-Light-EUC-H findfont
  exch scalefont
  setfont
} def

/mwg-font-math {
  /Times-Italic-H findfont
  exch scalefont
  setfont
} def

/mwg-font-roman {
  /Times-Roman-H findfont
  exch scalefont
  setfont
} def

%-------------------------------------------------------------------------------
gsave
  50 30 translate
  [
    [-30 70] [0 70]
    [0 0]    [-30 0]
    45 2
  ] mwg-hatch-quadr
  [
    [40 70] [45 70]
    [45 0]  [40 0]
    45 2
  ] mwg-hatch-quadr
  [
    [80 70] [115 70]
    [115 0] [80 0]
    45 2
  ] mwg-hatch-quadr
  
  -30 0 120  0 mwg-draw-arrow
    0 0   0 85 mwg-draw-arrow
  40 0 moveto 0 70 rlineto stroke
  45 0 moveto 0 70 rlineto stroke
  80 0 moveto 0 70 rlineto stroke
  
  10 mwg-font-roman -3 -15 moveto (0) show
  10 mwg-font-math 38 -15 moveto (L) show
  10 mwg-font-math 75 -15 moveto (2L) show
  10 mwg-font-math 128 -5 moveto (x) show
  
  7 mwg-font-mincho -35 90 moveto (\245\335\245\306\245\363\245\267\245\343\245\353\245\250\245\315\245\353\245\256\241\274) show
grestore

%10 10 190 130 mwg-draw-rect
end
%showpage 2002physQ1_1.save restore
